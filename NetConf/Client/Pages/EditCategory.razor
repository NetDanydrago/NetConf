@inject HttpClient HttpClient 
<div class="form-group row">
    <label class="col-sm-2 col-form-label">Id</label>
    <div class="col-sm-10">
        <input type="email" @bind="@Category.CategoryId" class="form-control">
    </div>
</div>
<div class="form-group row">
    <label  class="col-sm-2 col-form-label">Name</label>
    <div class="col-sm-10">
        <input type="text" @bind="@Category.CategoryName" class="form-control">
    </div>
</div>
<div class="form-group row">
    <label   class="col-sm-2 col-form-label">Description</label>
    <div class="col-sm-10">
        <input type="text" @bind="@Category.CategoryDescription"  class="form-control">
    </div>
</div>
<div class="form-group">
    <label for="exampleFormControlInput1">Imagen</label>
        <div class="DropArea @DropClass">
                <div class="col-6">
                    <text>Drag and drop your image .</text>
                </div>
                <div class="col-6">
                        <img class="card-img" 
                             src="data:image/jpeg;base64,@Category.CategoryImage" />
                </div>
            <InputFile OnChange="OnInputFileChange"
                       @ondragenter="@(() => DropClass = "DropAreaDrug")"
                       @ondragleave="@(() => DropClass = string.Empty)" accept=".png" />
        </div>
</div>
<div class="form-group row">
    <div class="col-sm-10">
        <button @onclick="() => { }" class="btn btn-primary">Guardar</button>
    </div>
</div>



    @code {

        [Parameter]
        public Category Category { get; set; }

        string DropClass = string.Empty;

        private async Task UpdateCategory()
        {
            await HttpClient.PostAsJsonAsync<Category>
                ("api/category", Category);
        }

        private async Task OnInputFileChange(InputFileChangeEventArgs e)
        {
            var Format = "image/jpeg";

            var ResizedImageFile = await e.File.RequestImageFileAsync(Format,
                500, 500);
            var buffer = new byte[ResizedImageFile.Size];
            await ResizedImageFile.OpenReadStream().ReadAsync(buffer);
            Category.CategoryImage = Convert.ToBase64String(buffer);
            this.StateHasChanged();
        }
    }


